{"version":3,"sources":["components/_dashboard/user/UserDetailsForm.js","pages/dashboard/UserDetails.js"],"names":["UserDetailsForm","currentUser","userSpecialPermissions","parameterSettings","navigate","useNavigate","enqueueSnackbar","useSnackbar","role","formik","max_coverage","settings","default_coverage","useFormik","enableReinitialize","initialValues","name","email","password","phoneNumber","address","country","state","city","zipCode","avatarUrl","serverConfig","baseUrl","status","online","onlineStatus","onSubmit","values","a","setSubmitting","resetForm","setErrors","fakeRequest","axios","put","username","variant","PATH_DASHBOARD","user","list","console","error","errors","touched","handleSubmit","setFieldValue","getFieldProps","value","noValidate","autoComplete","Grid","container","spacing","item","xs","md","Card","sx","py","px","Label","color","textTransform","position","top","right","Box","mb","Avatar","src","FormHelperText","textAlign","FormControlLabel","labelPlacement","control","Switch","disabled","onChange","event","target","checked","label","Typography","mx","width","justifyContent","isVerified","p","Stack","direction","sm","TextField","inputProps","readOnly","fullWidth","UserDetails","themeStretch","useSettings","dispatch","useDispatch","userId","useParams","useSelector","userList","specialPermissionList","find","paramCase","id","toString","specialPermssion","setting","settingsList","settingRow","type","useEffect","getUserList","getSpecialPermssionList","getSettingsList","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","root","UserSpecialPermissionsForm"],"mappings":"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","file":"static/js/38.17df5970.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel,\r\n  Avatar\r\n} from '@material-ui/core';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport Label from '../../Label';\r\nimport { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUserDetailsForm.propTypes = {\r\n  currentUser: PropTypes.object,\r\n  userSpecialPermissions: PropTypes.object,\r\n  parameterSettings: PropTypes.object\r\n};\r\n\r\nexport default function UserDetailsForm({ currentUser, userSpecialPermissions, parameterSettings }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const role = currentUser\r\n    ? ((currentUser.role === 'user' || currentUser.role === 's-user') && userSpecialPermissions && 's-user') ||\r\n      currentUser.role\r\n    : '';\r\n  const displayMaxCoverage =\r\n    (userSpecialPermissions && userSpecialPermissions.max_coverage) ||\r\n    (parameterSettings && parameterSettings.settings.default_coverage) ||\r\n    150;\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      name: currentUser?.name || '',\r\n      email: currentUser?.email || '',\r\n      password: '',\r\n      // gender: currentUser && currentUser.gender > -1 ? currentUser.gender : '',\r\n      role: role || '',\r\n      phoneNumber: currentUser?.phoneNumber || '',\r\n      address: currentUser?.address || '',\r\n      country: currentUser?.country || '',\r\n      state: currentUser?.state || '',\r\n      city: currentUser?.city || '',\r\n      zipCode: currentUser?.zipCode || '',\r\n      avatarUrl: (currentUser && `${serverConfig.baseUrl}/user/img-src/${currentUser.avatarUrl}`) || null,\r\n      status: currentUser?.status,\r\n      online: currentUser?.online || false,\r\n      onlineStatus: (currentUser?.online && 'online') || 'offline',      \r\n    },\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n\r\n        await axios.put(`/user/manage-users?username=${values.username}`, values);\r\n\r\n        resetForm();\r\n        setSubmitting(false);\r\n        enqueueSnackbar('Update success', { variant: 'success' });\r\n        navigate(PATH_DASHBOARD.user.list);\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <Card sx={{ py: 10, px: 3 }}>\r\n              <Label\r\n                color={values.status !== 'active' ? 'error' : 'success'}\r\n                sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\r\n              >\r\n                {values.status}\r\n              </Label>\r\n\r\n              <Box sx={{ mb: 5 }}>\r\n                <Avatar src={values.avatarUrl} />\r\n                <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\r\n                  {touched.avatarUrl && errors.avatarUrl}\r\n                </FormHelperText>\r\n              </Box>\r\n\r\n              <FormControlLabel\r\n                labelPlacement=\"start\"\r\n                control={\r\n                  <Switch\r\n                    disabled\r\n                    onChange={(event) => setFieldValue('status', event.target.checked ? 'banned' : 'active')}\r\n                    checked={values.status !== 'active'}\r\n                  />\r\n                }\r\n                label={\r\n                  <>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                      Banned\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                      Apply disable account\r\n                    </Typography>\r\n                  </>\r\n                }\r\n                sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\r\n              />\r\n\r\n              <FormControlLabel\r\n                labelPlacement=\"start\"\r\n                control={<Switch disabled {...getFieldProps('isVerified')} checked={values.isVerified} />}\r\n                label={\r\n                  <>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                      Email Verified\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                      Disabling this will automatically send the user a verification email\r\n                    </Typography>\r\n                  </>\r\n                }\r\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\r\n              />\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    disabled\r\n                    inputProps={{ readOnly: true }}\r\n                    fullWidth\r\n                    label=\"Email\"\r\n                    {...getFieldProps('email')}\r\n                  />\r\n                  <TextField\r\n                    disabled\r\n                    inputProps={{ readOnly: true }}\r\n                    fullWidth\r\n                    label=\"Nickname\"\r\n                    {...getFieldProps('name')}\r\n                  />\r\n                </Stack>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Role\" {...getFieldProps('role')} />\r\n                  <TextField disabled fullWidth label=\"Status\" {...getFieldProps('onlineStatus')} />\r\n                </Stack>\r\n{/* \r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    select\r\n                    fullWidth\r\n                    label=\"Gender\"\r\n                    {...getFieldProps('gender')}\r\n                    SelectProps={{ native: true }}\r\n                    disabled\r\n                  >\r\n                    <option value=\"\" />\r\n                    <option key=\"male\" value=\"0\">\r\n                      Male\r\n                    </option>\r\n                    <option key=\"female\" value=\"1\">\r\n                      Female\r\n                    </option>\r\n                    <option key=\"business\" value=\"2\">\r\n                      Business\r\n                    </option>\r\n                  </TextField>\r\n                  <TextField disabled fullWidth label=\"Role\" {...getFieldProps('role')} />\r\n                </Stack> \r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Credit\" {...getFieldProps('credit')} />\r\n                  <TextField disabled fullWidth label=\"Balance\" {...getFieldProps('balance')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Status\" {...getFieldProps('onlineStatus')} />\r\n                  <TextField disabled fullWidth label=\"Punishment\" {...getFieldProps('punishment')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Coverage\" {...getFieldProps('coverage')} />\r\n                  <TextField disabled fullWidth label=\"Max Coverage\" {...getFieldProps('max_coverage')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Location\" {...getFieldProps('country')} />\r\n                  <TextField disabled fullWidth label=\"Latitude and logintude\" {...getFieldProps('location')} />\r\n                </Stack>\r\n*/}\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Registration Date\" {...getFieldProps('created')} />\r\n                </Stack>\r\n{/* \r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    disabled\r\n                    fullWidth\r\n                    label=\"Note\"\r\n                    multiline\r\n                    minRows={4}\r\n                    maxRows={4}\r\n                    {...getFieldProps('note')}\r\n                  />\r\n                </Stack>\r\n*/}\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList, getSpecialPermssionList } from '../../redux/slices/user';\r\nimport { getSettingsList } from '../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport UserDetailsForm from '../../components/_dashboard/user/UserDetailsForm';\r\nimport UserSpecialPermissionsForm from '../../components/_dashboard/user/UserSpecialPermissionsForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserDetails() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { userId } = useParams();\r\n  const { userList, specialPermissionList } = useSelector((state) => state.user);\r\n  const currentUser = userList.find((user) => paramCase(user.id.toString()) === userId);\r\n  const userSpecialPermissions = specialPermissionList.find(\r\n    (specialPermssion) => paramCase(specialPermssion.userId) === userId\r\n  );\r\n  const readOnly = true;\r\n\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n    dispatch(getSpecialPermssionList());\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"User: Create a new user | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"User Details\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'User', href: PATH_DASHBOARD.user.list },\r\n            { name: `${currentUser && currentUser.name}` }\r\n          ]}\r\n        />\r\n\r\n        <UserDetailsForm\r\n          currentUser={currentUser}\r\n          userSpecialPermissions={userSpecialPermissions}\r\n          parameterSettings={parameterSettings}\r\n        />\r\n        {userSpecialPermissions && (\r\n          <UserSpecialPermissionsForm\r\n            readOnly={readOnly}\r\n            currentUser={currentUser}\r\n            userSpecialPermissions={userSpecialPermissions}\r\n          />\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}